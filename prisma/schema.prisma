generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  passwordHash      String             @map("password_hash")
  emailVerified     Boolean            @default(false) @map("email_verified")
  firstName         String?            @map("first_name")
  lastName          String?            @map("last_name")
  phone             String?
  avatarUrl         String?            @map("avatar_url")
  status            UserStatus         @default(ACTIVE)
  lastLoginAt       DateTime?          @map("last_login_at")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  organizationUsers OrganizationUser[]
  vendors           Vendor[]

  @@map("users")
}

model Organization {
  id        String             @id @default(uuid())
  name      String
  slug      String             @unique
  logoUrl   String?            @map("logo_url")
  website   String?
  phone     String?
  address   String?
  isActive  Boolean            @default(true) @map("is_active")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  users     OrganizationUser[]
  vendors   Vendor[]

  @@map("organizations")
}

model OrganizationUser {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  organizationId String       @map("organization_id")
  role           UserRole
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId], map: "organization_users_organization_id_fkey")
  @@map("organization_users")
}

model Vendor {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  companyName    String       @map("company_name")
  serviceType    String       @map("service_type")
  phone          String?
  email          String?
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
  @@index([userId], map: "vendors_user_id_fkey")
  @@map("vendors")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  tagline  String
  color    String
  services Service[]

  @@map("categories")
}


model Service {
  id          Int      @id @default(autoincrement())
  category_id Int
  name        String
  description String
  features    Json
  impact      String
  icon        String
  category    Category @relation(fields: [category_id], references: [id])

  @@index([category_id], map: "services_category_id_fkey")
  @@map("services")
}

model AboutUs {
  id          Int      @id @default(autoincrement())
  section     String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  image     String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Job {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  image       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Application Application[]
}

model Applicant {
  id          Int           @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String        @unique
  resume      String?
  createdAt   DateTime      @default(now())
  Application Application[]
}

model Application {
  id          Int       @id @default(autoincrement())
  jobId       Int
  applicantId Int
  status      String    @default("Pending")
  appliedAt   DateTime  @default(now())
  Applicant   Applicant @relation(fields: [applicantId], references: [id])
  Job         Job       @relation(fields: [jobId], references: [id])

  @@index([applicantId], map: "Application_applicantId_fkey")
  @@index([jobId], map: "Application_jobId_fkey")
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Policy {
  id                       Int       @id @default(autoincrement())
  title                    String
  companyName              String
  contactEmail             String
  privacyEmail             String
  website                  String?
  mailingAddress           String?
  responseTime             String?
  inactiveAccountThreshold String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  Section                  Section[]
}

model Section {
  id        Int      @id @default(autoincrement())
  key       String
  title     String
  intro     String?
  content   Json?
  order     Int?
  policyId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Policy    Policy   @relation(fields: [policyId], references: [id])

  @@index([policyId], map: "Section_policyId_fkey")
}

model Feature {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  planId      Int
  plan        Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId], map: "Feature_planId_fkey")
}

model Plan {
  id           Int       @id @default(autoincrement())
  name         String
  badge        String?
  monthlyPrice Float
  yearlyPrice  Float
  description  String?
  gradient     String?
  createdAt    DateTime  @default(now())
  features     Feature[]
}


enum UserRole {
  SYSTEM_ADMIN
  PROPERTY_MANAGER
  TENANT
  VENDOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
