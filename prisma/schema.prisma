generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  passwordHash      String             @map("password_hash")
  emailVerified     Boolean            @default(false) @map("email_verified")
  firstName         String?            @map("first_name")
  lastName          String?            @map("last_name")
  phone             String?
  avatarUrl         String?            @map("avatar_url")
  status            UserStatus         @default(ACTIVE)
  lastLoginAt       DateTime?          @map("last_login_at")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  organizationUsers OrganizationUser[]
  vendors           Vendor[]
  listings          Listing[]


  @@map("users")
}

model Organization {
  id        String             @id @default(uuid())
  name      String
  slug      String             @unique
  logoUrl   String?            @map("logo_url")
  website   String?
  phone     String?
  address   String?
  isActive  Boolean            @default(true) @map("is_active")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  users     OrganizationUser[]
  
  listings          Listing[]
  vendors   Vendor[]
 properties   Property[]       @relation("OrganizationToProperty")

  @@map("organizations")
}

model OrganizationUser {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  organizationId String       @map("organization_id")
  role           UserRole
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
   managedProperties Property[]
  postedServices    ServiceMarketplace[]
  adminActions      AdminAction[]      @relation("AdminActionsByAdmin")
  targetActions     AdminAction[]      @relation("AdminActionsTarget")

  @@unique([userId, organizationId])
  @@index([organizationId], map: "organization_users_organization_id_fkey")
  @@map("organization_users")
}

model Vendor {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  companyName    String       @map("company_name")
  serviceType    String       @map("service_type")
  phone          String?
  email          String?
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
  @@index([userId], map: "vendors_user_id_fkey")
  @@map("vendors")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  tagline  String
  color    String
  services Service[]

  @@map("categories")
}


model Service {
  id          Int      @id @default(autoincrement())
  category_id Int
  name        String
  description String
  features    Json
  impact      String
  icon        String
  category    Category @relation(fields: [category_id], references: [id])

  @@index([category_id], map: "services_category_id_fkey")
  @@map("services")
}

model AboutUs {
  id          Int      @id @default(autoincrement())
  section     String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  image     String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Job {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  image       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Application Application[]
}

model Applicant {
  id          Int           @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String        @unique
  resume      String?
  createdAt   DateTime      @default(now())
  Application Application[]
}

model Application {
  id          Int       @id @default(autoincrement())
  jobId       Int
  applicantId Int
  status      String    @default("Pending")
  appliedAt   DateTime  @default(now())
  Applicant   Applicant @relation(fields: [applicantId], references: [id])
  Job         Job       @relation(fields: [jobId], references: [id])

  @@index([applicantId], map: "Application_applicantId_fkey")
  @@index([jobId], map: "Application_jobId_fkey")
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  countryCode String
  phone     String
  message   String
  createdAt DateTime @default(now())
}

model Policy {
  id                       Int       @id @default(autoincrement())
  title                    String
  companyName              String
  contactEmail             String
  privacyEmail             String
  website                  String?
  mailingAddress           String?
  responseTime             String?
  inactiveAccountThreshold String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  Section                  Section[]
}

model Section {
  id        Int      @id @default(autoincrement())
  key       String
  title     String
  intro     String?
  content   Json?
  order     Int?
  policyId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Policy    Policy   @relation(fields: [policyId], references: [id])

  @@index([policyId], map: "Section_policyId_fkey")
}

model Feature {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  planId      Int
  plan        Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId], map: "Feature_planId_fkey")
}

model Plan {
  id           Int       @id @default(autoincrement())
  name         String
  badge        String?
  monthlyPrice Float
  yearlyPrice  Float
  description  String?
  gradient     String?
  createdAt    DateTime  @default(now())
  features     Feature[]
}


enum UserRole {
  SYSTEM_ADMIN
  PROPERTY_MANAGER
  TENANT
  VENDOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model CTA {
  id         Int      @id @default(autoincrement())
  page       String
  title      String
  subtitle   String
  buttonText String
  buttonUrl  String
  gradient   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model HeroSection {
  id          Int       @id @default(autoincrement())
  page        String    // which page this hero belongs to, e.g., "home", "blog"
  title       String?
  subtitle    String?
  description String?
  buttonText  String?
  buttonUrl   String?
  imageUrl    String?   // hero image
  iconUrl     String?   // optional icon
  searchBar   Boolean   @default(false) // whether to show search bar
  gradient    String?   // background gradient
  layout      String?   // optional layout type
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


// ---------------------------------------
// MARKETPLACE LISTINGS
// ---------------------------------------

model CategoryMarketplace {
  id          String   @id @default(uuid())
  name        String   @unique        // e.g., Property, Service, Appliance
  description String?
  createdAt   DateTime @default(now())
  listings    Listing[]
}

model ListingType {
  id          String   @id @default(uuid())
  name        String   @unique        // e.g., For Sale, For Rent, For Hire
  description String?
  createdAt   DateTime @default(now())
  listings    Listing[]
}

model ListingStatus {
  id          String   @id @default(uuid())
  name        String   @unique        // e.g., Pending, Approved, Active, Rejected, Deleted
  description String?
  createdAt   DateTime @default(now())
  listings    Listing[]
}

model PropertyType {
  id          String   @id @default(uuid())
  name        String   @unique        // e.g., Apartment, House, Land, Commercial
  description String?
  createdAt   DateTime @default(now())
  properties  Property[]
}

model ServiceType {
  id          String   @id @default(uuid())
  name        String   @unique        // e.g., Plumbing, Cleaning, Electrical
  description String?
  createdAt   DateTime @default(now())
 serviceMarketplace    ServiceMarketplace[]
}

model ActionType {
  id          String   @id @default(uuid())
  name        String   @unique        // e.g., APPROVE_USER, DELETE_LISTING, FEATURE_LISTING
  description String?
  createdAt   DateTime @default(now())
  adminActions AdminAction[]
}

model Location {
  id          String   @id @default(uuid())
  name        String   // e.g., Nairobi, Mombasa
  city        String?
  country     String?
  createdAt   DateTime @default(now())
  listings    Listing[]
  properties  Property[]
}


model Listing {
  id             String         @id @default(uuid())
  organizationId String
  createdBy      String
  categoryId     String
  listingTypeId  String?
  statusId       String?
  locationId     String?
  title          String
  description    String
  price          Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  organization   Organization   @relation(fields: [organizationId], references: [id])
  createdByUser  User           @relation(fields: [createdBy], references: [id])
  categoryMarketPlace       CategoryMarketplace     @relation(fields: [categoryId], references: [id])
  listingType    ListingType?   @relation(fields: [listingTypeId], references: [id])
  status         ListingStatus? @relation(fields: [statusId], references: [id])
  location       Location?      @relation(fields: [locationId], references: [id])

  property       Property?
 serviceMarketplace        ServiceMarketplace?
  images         ListingImage[]
  adminActions   AdminAction[]
}



model Property {
  id                  String            @id @default(uuid())
  listingId           String            @unique
  managerId           String?
organizationId String?
  propertyTypeId      String?
  locationId          String?
  city                String
  address             String
  bedrooms            Int
  bathrooms           Int
  size                Float
  amenities           String?
  isFurnished         Boolean           @default(false)
  availabilityStatus  String?           // e.g., Available, Occupied, Maintenance
  createdAt           DateTime          @default(now())

  // Relations
  listing             Listing           @relation(fields: [listingId], references: [id])
  manager             OrganizationUser? @relation(fields: [managerId], references: [id])
  organization       Organization? @relation("OrganizationToProperty", fields: [organizationId], references: [id])
  propertyType        PropertyType?     @relation(fields: [propertyTypeId], references: [id])
  location            Location?         @relation(fields: [locationId], references: [id])
    appliances          Appliance[]       @relation("PropertyAppliances")

  
}

model Appliance {
 id          String   @id @default(uuid())
  name        String          
  description String?
  createdAt   DateTime @default(now())
  properties  Property[]  @relation("PropertyAppliances")
}

model ServiceMarketplace {
  id            String            @id @default(uuid())
  listingId     String            @unique
  vendorId      String?
  serviceTypeId String?
  description   String
  rate          Float
  availability  String?
  createdAt     DateTime          @default(now())

  listing       Listing           @relation(fields: [listingId], references: [id])
  vendor        OrganizationUser? @relation(fields: [vendorId], references: [id])
  serviceType   ServiceType?      @relation(fields: [serviceTypeId], references: [id])
}

// ---------------------------------------
// SUPPORTING TABLES
// ---------------------------------------

model ListingImage {
  id          String   @id @default(uuid())
  listingId   String
  imageUrl    String
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())

  listing     Listing  @relation(fields: [listingId], references: [id])
}

model AdminAction {
  id                 String             @id @default(uuid())
  adminOrgUserId     String
  targetOrgUserId    String?
  listingId          String?
  actionTypeId       String
  reason             String?
  details            Json?
  createdAt          DateTime           @default(now())

  admin              OrganizationUser   @relation("AdminActionsByAdmin", fields: [adminOrgUserId], references: [id])
  target             OrganizationUser?  @relation("AdminActionsTarget", fields: [targetOrgUserId], references: [id])
  listing            Listing?           @relation(fields: [listingId], references: [id])
  actionType         ActionType         @relation(fields: [actionTypeId], references: [id])
}


model NavbarItem {
  id          Int      @id @default(autoincrement())
  name        String
  href        String
  order       Int       @default(0)
  isVisible   Boolean   @default(true)
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
